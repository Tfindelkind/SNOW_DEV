<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_nuta2_nutanix_ca.Nutanix_ImportApplicationProfiles</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Nutanix_ImportApplicationProfiles</name>
        <script><![CDATA[var Nutanix_ImportApplicationProfiles = Class.create();
Nutanix_ImportApplicationProfiles.prototype = {
    initialize: function() {
		this.appUtil = new Nutanix_Calm_Utils();	
		this.logger = new Nutanix_Calm_Logger();
    },
	
	processApplicationProfiles: function(current){
		try{
			this.logger.debug("Inside Nutanix_ImportApplicationProfiles.processApplicationProfiles");
			var payload = this.appUtil.parse(current.payload);

			var catSysId = current.parameter+'';
			
			this._createContainer(catSysId);
			var substrate = this.appUtil.parse(current.substrate);
			var sub_type_rel = [];
			if(substrate){
				for(var l=0; l<substrate.length ;l++){
					var sub_entity = substrate[l];
					sub_type_rel[l] = {
						"uuid" : sub_entity.uuid+"",
						"type" : (sub_entity.type+"").replace("_VM","")
					}
				}
			}
			//gs.error("sub_type_rel :: " + JSON.stringify(sub_type_rel) );
			for(var i=0; i<payload.length; i++){
				this.logger.info("Retrieved Number of Application Profiles "+payload.length);
				var profile = payload[i];
				
				var profileGR = new GlideRecord(this.appUtil.configuration.table.applicationProfiles+''); //this.appUtil.configuration.table.applicationProfiles+'');
				profileGR.addQuery('uuid', profile.uuid+'');
				profileGR.query();
				
				var profileSysId;
				
				if(profileGR.next()){
					profileSysId = profileGR.sys_id;
				} else {
					profileGR.initialize();
					profileGR.name = profile.name+'';
					profileGR.description = profile.description+'';
					profileGR.uuid = (profile.uuid)?profile.uuid+'':'';
					profileSysId = profileGR.insert();
				}
				
				this.logger.debug("Successful record insertion in App Profile Table. Record name:- "+profile.name);
				var variablesList = profile.variable_list;
				
				for(var j=0; j<variablesList.length; j++){
					var field = variablesList[j];

					var fieldSysd = '';
					
					var fieldGR = new GlideRecord(this.appUtil.configuration.table.varaiblesTable+'');
					fieldGR.addQuery('name', field.name+'');
					fieldGR.addQuery('cat_item', current.parameter+'');
					fieldGR.query();
					
					if(fieldGR.next()){
						
						fieldGR.type = (field.type+'' == 'SECRET') ? 25 : 6;
						//fieldGR.variable_set = profileSysId;
						fieldGR.cat_item = current.parameter+'';
						fieldGR.active = true;
						fieldGR.question_text = (field.label)?field.label+'':field.name+'';
						fieldGR.name = field.name+'';
					//	fieldGR.default_value = (field.value)?field.value+'':'';
						fieldGR.tooltip = field.description+'';
						fieldGR.variable_width = 50;
						fieldGR.order = 11;
						
						//field.uuid;
						fieldSysd = fieldGR.update();
						
					} else {
						fieldGR.initialize();
						fieldGR.type = (field.type+'' == 'SECRET') ? 25 : 6;
						//fieldGR.variable_set = profileSysId;
						fieldGR.cat_item = current.parameter+'';
						fieldGR.active = true;
						fieldGR.question_text = (field.label)?field.label+'':field.name+'';
						fieldGR.name = field.name+'';
				//		fieldGR.default_value = (field.value)?field.value+'':'';
						fieldGR.tooltip = field.description+'';
						fieldGR.variable_width = 50;
						fieldGR.order = 11;
						
						//field.uuid;
						fieldSysd = fieldGR.insert();
					}
					
					this._insertCatalogVariableProperties(profileSysId, field, fieldSysd, current.parameter+'');
					
					this.logger.debug("Successful record insertion in App Profile Variable Set. Record Name:- "+field.name);
				}
				//////
				var deployment = profile.deployment_create_list;
				var provider = "";
				if(deployment){
					//var len = deployment.length-1;
					for(var k=0; k<deployment.length ; k++){
						var dep_entity = deployment[k];
						var subs_entity = (dep_entity.substrate_local_reference) ? dep_entity.substrate_local_reference.uuid : "";
						for(var c=0; c<sub_type_rel.length ; c++){
							var subs_rel_entity = sub_type_rel[c];
							if( subs_rel_entity.uuid == subs_entity && !provider.includes(subs_rel_entity.type)){
								//provider = (k != (deployment.length-1) ) ? provider + subs_rel_entity.type + "," : provider + subs_rel_entity.type + "";
								provider = (k == 0) ? subs_rel_entity.type :  provider + "," + subs_rel_entity.type + "";
								break;
							}
						}
					}
					//gs.error("provider :: "+profile.name+'::'+provider);
				}
				
				///////
				var setProfileGR = new GlideRecord(this.appUtil.configuration.table.catalogProfileRelation+''); //this.appUtil.configuration.table.variableSetTable+'');
				setProfileGR.addQuery('application_profile', profileSysId+'');
				setProfileGR.addQuery('catalog_item', current.parameter+'');
				setProfileGR.query();
				
				if(!setProfileGR.hasNext()){
					setProfileGR.initialize();
					setProfileGR.application_profile = profileSysId+'';
					setProfileGR.catalog_item = current.parameter+'';
					setProfileGR.providers = provider;
					setProfileGR.insert();	
				}else if(setProfileGR.next()){
					//gs.error("inside substrate setting");
					setProfileGR.application_profile = profileSysId+'';
					setProfileGR.catalog_item = current.parameter+'';
					setProfileGR.providers = provider;
					setProfileGR.update();
				}

			}	
			
		}catch(e){
			this.logger.error("Error Nutanix_ImportApplicationProfiles.processApplicationProfiles: Error:- "+e);
		}
		
	},
	
	_createContainer: function( catSysId ){
		
		try{
			var containerCheck = new GlideRecord(this.appUtil.configuration.table.varaiblesTable+'');
			containerCheck.addEncodedQuery('name=profile_configuration^cat_item=' + catSysId);
			containerCheck.query();

			if(!containerCheck.hasNext()){
				this._createContainerStart(catSysId+'');
				this._createContainerEnd(catSysId+'');	
			}	
		}catch(e){
			this.logger.error("Error Nutanix_ImportApplicationProfiles._createContainer: Error:- "+e);
		}
		
	},
	
	_createContainerStart: function( catSysID ){
	
		try{
			this.logger.debug("Inside Nutanix_ImportApplicationProfiles._createContainerStart");
			var variable = new GlideRecord(this.appUtil.configuration.table.varaiblesTable+'');
			variable.initialize();
			variable.type = '19';
			variable.display_title = 'true';
			variable.cat_item = catSysID;
			variable.active = 'true';
			variable.order = 10;
			variable.question_text = 'Profile Configuration';
			variable.name = 'profile_configuration';
			variable.layout = 'normal';//2across';
			variable.insert();	
		}catch(e){
			this.logger.error("Error Nutanix_ImportApplicationProfiles._createContainerStart: Error:- "+e);
		}
		
	},
	
	_createContainerEnd: function( catSysID ){
	
		try{
			this.logger.debug("Inside Nutanix_ImportApplicationProfiles._createContainerEnd");
			var variable = new GlideRecord(this.appUtil.configuration.table.varaiblesTable+'');
			variable.initialize();
			variable.type = '20';
			variable.cat_item = catSysID;
			variable.active = 'true';
			variable.order = 12;
			variable.insert();	
		}catch(e){
			this.logger.error("Error Nutanix_ImportApplicationProfiles._createContainerEnd: Error:- "+e);
		}
	},
	
	_insertCatalogVariableProperties: function(profileSysId, field, fieldSysd, catalogSysId){
	
		try{
			this.logger.debug("Inside Nutanix_ImportApplicationProfiles._insertCatalogVariableProperties");
			var gr = new GlideRecord(this.appUtil.configuration.table.variablesProperties+'');
			gr.addQuery('application_profile', profileSysId);
			gr.addQuery('catalog_item', catalogSysId);
			gr.addQuery('variable', fieldSysd);
			gr.query();
			
			if(gr.next()){
				
				gr.application_profile = profileSysId+'';
				gr.catalog_item = catalogSysId;
				gr.default_value = (field.value)?field.value+'':'';
				gr.runtime_config = field.editables.value+'';//((field.value+'').indexOf('@@') != -1) ? false : field.editables.value+'';
				gr.uuid = field.uuid+'';
				gr.variable = fieldSysd;
				gr.isprofilevariable = true;
				gr.isdisabled = (field.editables.value+'' == 'true') ? false : true;//((field.value+'').indexOf('@@') != -1) ? true : (field.editables.value+'' == 'true') ? false : true;
				gr.update();		
				
			}else{
				
				gr.initialize();
				gr.application_profile = profileSysId+'';
				gr.catalog_item = catalogSysId+'';
				gr.default_value = (field.value)?field.value+'':'';
				gr.runtime_config = field.editables.value+'';//((field.value+'').indexOf('@@') != -1) ? false : field.editables.value+'';
				gr.uuid = field.uuid+'';
				gr.variable = fieldSysd;
				gr.isprofilevariable = true;
				gr.isdisabled = (field.editables.value+'' == 'true') ? false : true;//((field.value+'').indexOf('@@') != -1) ? true : (field.editables.value+'' == 'true') ? false : true;
				gr.insert();		
			}
			
		}catch(e){
			this.logger.error("Error Nutanix_ImportApplicationProfiles._insertCatalogVariableProperties: Error:- "+e);
		}
		
	},
	
    type: 'Nutanix_ImportApplicationProfiles'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>girishgyani</sys_created_by>
        <sys_created_on>2018-10-14 20:00:23</sys_created_on>
        <sys_id>37c15d5f37896300fdfc097973990e1a</sys_id>
        <sys_mod_count>57</sys_mod_count>
        <sys_name>Nutanix_ImportApplicationProfiles</sys_name>
        <sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope>
        <sys_update_name>sys_script_include_37c15d5f37896300fdfc097973990e1a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-03-05 09:35:21</sys_updated_on>
    </sys_script_include>
</record_update>
