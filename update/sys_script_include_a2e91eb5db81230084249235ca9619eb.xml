<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_nuta2_nutanix_ca.Nutanix_ImportProjects</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Nutanix_ImportProjects</name>
        <script><![CDATA[var Nutanix_ImportProjects = Class.create();
Nutanix_ImportProjects.prototype = {
	initialize: function() {
		this.appUtil = new Nutanix_Calm_Utils();
		this.logger = new Nutanix_Calm_Logger();
		this.pageBreaker = 20;
	},
	
	startImportProjects : function(){
		try{
			this.logger.debug("Inside Nutanix_ImportProjects.startImportProjects");
			var body = {
				"kind": "project",
				"offset": 0,
				"length": 1
			};
			var response = this.appUtil.makeCalmApiCall("POST", this.appUtil.configuration.api.getProjectList+"", this.appUtil.stringify(body));
			if(response.getStatusCode() == '200' || response.getStatusCode() == '201'){
				this.logger.info("Connection established to "+this.appUtil.configuration.api.getProjectList);
				var parsed = this.appUtil.parse(response.getBody());
				var records = parsed.metadata.total_matches;
				var pages = parseInt(records/this.pageBreaker);
				this.logger.debug("Number of Project JSON pages "+(pages+1));
				for(var i=0, k=0 ; i <= pages; i++, k+=19) {
					body = {
						"kind": "project",
						"offset": i+k,
						"length": this.pageBreaker
					};
					this.logger.debug("Call number to importProjectData:"+(i+1) );
					this.appUtil.insertIntoQueue("importProjectData", "POST", this.appUtil.stringify(body), this.appUtil.configuration.api.getProjectList+"", 'Import project data', 'This process invokes the import of project data.');
				}
				this.logger.info("Completed importing and processing of Projects.");
			}
			else{
				this.logger.debug("Nutanix_ImportProjects.startImportProjects :- Connection to projects/list not established :- "+response.haveError()+" Status code :- "+response.getStatusCode());
			}
		}
		catch(e){
			this.logger.debug("Nutanix_ImportProjects.startImportProjects :- Exception caught during retrieval of projects. Error: "+e);
			this.logger.error("Exception caught during retrieval of projects. Error: "+e);
		}
	},
	
	importProjectData: function(current){
		try{
			this.logger.debug("Inside Nutanix_ImportProjects.importProjectData");
			var response = this.appUtil.makeCalmApiCall(current.method+'', current.payload+'', current.parameter+'');
			if(response.getStatusCode() == '200' || response.getStatusCode() == '201'){
				var parsedJSON = this.appUtil.parse(response.getBody());
				var entities = parsedJSON.entities;
				this.logger.info("Number of imported Project:"+entities.length);
				for(var i=0; i<entities.length; i++){
					var entity = entities[i];
					this.appUtil.insertIntoQueue("processImportProjectData", "", '', this.appUtil.stringify(entity), 'Process project data', 'This job processes the imported project data.');
				}
			}
			else{
				this.logger.debug("Nutanix_ImportProjects.importProjectData :- Connection projects/list not established :- "+response.haveError()+" Status code :- "+response.getStatusCode());
			}
		}
		catch(e){
			this.logger.debug("Nutanix_ImportProjects.importProjectData :- Exception caught during retrieval of projects. Error:- "+e);
			this.logger.error("Exception caught during retrieval of projects. Error :- "+e);
		}
	},
	
	processImportProjectData: function(current){
		try{
			this.logger.debug("Inside Nutanix_ImportProjects.processImportProjectData");
			var insertData = new GlideRecord(this.appUtil.configuration.table.stagingProject+"");
			var entity = this.appUtil.parse(current.payload);
			var status = entity.status;
			var resource = entity.status.resources;
			var metadata = entity.metadata;
			insertData.initialize();
			var field;
			//To insert status data
			for(var key in status){
				field = status[key];
				if( key != 'resources')
					insertData[key] = (field.constructor === Object || field.constructor === Array ) ? JSON.stringify(field) : field+'';
			}
			//To insert resources data
			for(var key in resource){
				field = resource[key];
				insertData[key] = (field.constructor === Object || field.constructor === Array ) ? JSON.stringify(field) : field+'';
			}
			//To insert metadata
			for(var key in metadata){
				field = metadata[key];
				insertData[key] = (field.constructor === Object || field.constructor === Array ) ? JSON.stringify(field) : field+'';
			}
			insertData.insert();
		}
		catch(e){
			this.logger.debug("Nutanix_ImportProjects.processImportProjectData :- Exception caught during retrieval of projects. Error :- "+e);
			this.logger.error("Exception caught during retrieval of projects. Error :- "+e);
		}
	},
	MapCatItemToProject : function(current){
		try{
			var rel = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + "");
			rel.addQuery('catalog_item', (current.parameter+"").split(',')[0]);
			rel.deleteMultiple();
			
			var gr=new GlideRecord(this.appUtil.configuration.table.Project + "");
			var obj = {};
			gr.query();
			while(gr.next()){
				obj[gr.uuid+""] = gr.sys_id+"";
			}
			var projectList = JSON.parse(current.payload+'');
			
			if(projectList.constructor === Object)
				projectList = JSON.parse('['+current.payload+']') ;
			
			
			
			var relGR = new GlideRecord(this.appUtil.configuration.table.catalogProjectRelation + "");

			for(var i in projectList){
				var proj = projectList[i];
				
				relGR.initialize();
				relGR.catalog_item = (current.parameter+"").split(',')[0];
				relGR.version = (current.parameter+"").split(',')[1];
				relGR.projects = obj[proj.uuid+'']+"";
				relGR.insert();

			}
		}
		catch(e){
			this.logger.error("Exception caught while mapping Catalog Item to Project. Error :- "+e);
		}
	},
	
	type: 'Nutanix_ImportProjects'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-10-10 09:48:23</sys_created_on>
        <sys_id>a2e91eb5db81230084249235ca9619eb</sys_id>
        <sys_mod_count>66</sys_mod_count>
        <sys_name>Nutanix_ImportProjects</sys_name>
        <sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope>
        <sys_update_name>sys_script_include_a2e91eb5db81230084249235ca9619eb</sys_update_name>
        <sys_updated_by>bharat.vajj</sys_updated_by>
        <sys_updated_on>2018-12-18 05:55:03</sys_updated_on>
    </sys_script_include>
</record_update>
